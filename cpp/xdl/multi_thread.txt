// 多线程调用样例
void Initializer::MultiThreadInit(void* data, DataType type, size_t size) {
  static const size_t block_size = 1 << 15; // 32K
  if (size < block_size * 2) {
    Init(data, type, size);
  } else {
    char* ptr = (char*)data;
    std::promise<bool> ok;
    std::atomic<size_t> counter(size / block_size);
    while (size > 0) {
      size_t s = size < block_size * 2 ? size : block_size;
      ThreadPool::Global()->Schedule([=, &ok, &counter]{
        Init(ptr, type, s);
        if (--counter == 0) {
          ok.set_value(true);
        }
      });
      ptr += SizeOfType(type) * s;
      size -= s;
    }
    ok.get_future().wait();
  }
}